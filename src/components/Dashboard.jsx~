// import { useState, useEffect } from 'react';
// import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';
// import { format } from 'date-fns';
// import salesData from '../data/sales.json';
//
// const Dashboard = () => {
//     const [timeframe, setTimeframe] = useState('daily');
//     const [dateRange, setDateRange] = useState({ start: '', end: '' });
//     const [filteredSales, setFilteredSales] = useState([]);
//     const [sortConfig, setSortConfig] = useState({ key: 'date', direction: 'desc' });
//
//     useEffect(() => {
//         const filtered = salesData.sales.sort((a, b) => {
//             const aVal = a[sortConfig.key];
//             const bVal = b[sortConfig.key];
//             return sortConfig.direction === 'asc' ? aVal - bVal : bVal - aVal;
//         });
//         setFilteredSales(filtered);
//     }, [timeframe, dateRange, sortConfig]);
//
//     return (
//         <div className="space-y-6">
//             <div className="flex justify-between items-center">
//                 <h1 className="text-2xl font-bold">Dashboard</h1>
//                 <div className="flex gap-4">
//                     <select
//                         value={timeframe}
//                         onChange={(e) => setTimeframe(e.target.value)}
//                         className="bg-[#333] rounded-lg px-4 py-2"
//                     >
//                         <option value="daily">Daily</option>
//                         <option value="monthly">Monthly</option>
//                         <option value="yearly">Yearly</option>
//                         <option value="custom">Custom</option>
//                     </select>
//                     {timeframe === 'custom' && (
//                         <div className="flex gap-2">
//                             <input
//                                 type="date"
//                                 value={dateRange.start}
//                                 onChange={(e) => setDateRange({ ...dateRange, start: e.target.value })}
//                                 className="bg-[#333] rounded-lg px-4 py-2"
//                             />
//                             <input
//                                 type="date"
//                                 value={dateRange.end}
//                                 onChange={(e) => setDateRange({ ...dateRange, end: e.target.value })}
//                                 className="bg-[#333] rounded-lg px-4 py-2"
//                             />
//                         </div>
//                     )}
//                 </div>
//             </div>
//
//             <div className="bg-[#242424] p-6 rounded-xl">
//                 <LineChart width={800} height={300} data={filteredSales}>
//                     <CartesianGrid strokeDasharray="3 3" />
//                     <XAxis dataKey="date" />
//                     <YAxis />
//                     <Tooltip />
//                     <Legend />
//                     <Line type="monotone" dataKey="amount" stroke="#9ee637" />
//                 </LineChart>
//             </div>
//
//             <div className="bg-[#242424] p-6 rounded-xl">
//                 <div className="overflow-x-auto">
//                     <table className="w-full">
//                         <thead>
//                         <tr className="border-b border-[#333]">
//                             <th className="p-3 text-left">Date</th>
//                             <th className="p-3 text-left">Product</th>
//                             <th className="p-3 text-left">Quantity</th>
//                             <th className="p-3 text-left">Amount</th>
//                         </tr>
//                         </thead>
//                         <tbody>
//                         {filteredSales.map((sale, index) => (
//                             <tr key={index} className="border-b border-[#333]">
//                                 <td className="p-3">{format(new Date(sale.date), 'MMM dd, yyyy')}</td>
//                                 <td className="p-3">{sale.product}</td>
//                                 <td className="p-3">{sale.quantity}</td>
//                                 <td className="p-3">${sale.amount.toLocaleString()}</td>
//                             </tr>
//                         ))}
//                         </tbody>
//                     </table>
//                 </div>
//             </div>
//         </div>
//     );
// };
//
// export default Dashboard;


import { useState, useEffect } from 'react';
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';
import { format } from 'date-fns';
import { fetchSales } from '../services/api';

const Dashboard = () => {
    const [timeframe, setTimeframe] = useState('daily');
    const [dateRange, setDateRange] = useState({ start: '', end: '' });
    const [sales, setSales] = useState([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);
    const [sortConfig, setSortConfig] = useState({ key: 'date', direction: 'desc' });

    useEffect(() => {
        const loadSales = async () => {
            try {
                setLoading(true);
                const data = await fetchSales();
                setSales(data);
            } catch (err) {
                setError(err.message);
            } finally {
                setLoading(false);
            }
        };

        loadSales();
    }, []);

    const filteredSales = sales
        .filter(sale => {
            if (!dateRange.start || !dateRange.end) return true;
            const saleDate = new Date(sale.date);
            return saleDate >= new Date(dateRange.start) && saleDate <= new Date(dateRange.end);
        })
        .sort((a, b) => {
            const aVal = a[sortConfig.key];
            const bVal = b[sortConfig.key];
            return sortConfig.direction === 'asc' ? aVal - bVal : bVal - aVal;
        });

    if (loading) return (
        <div className="flex justify-center items-center h-screen">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-[#9ee637]"></div>
        </div>
    );

    if (error) return (
        <div className="bg-red-500 text-white p-4 rounded-lg">
            Error: {error}
        </div>
    );

    return (
        <div className="space-y-6">
            <div className="flex justify-between items-center">
                <h1 className="text-2xl font-bold">Dashboard</h1>
                <div className="flex gap-4">
                    <select
                        value={timeframe}
                        onChange={(e) => setTimeframe(e.target.value)}
                        className="bg-[#333] rounded-lg px-4 py-2"
                    >
                        <option value="daily">Daily</option>
                        <option value="monthly">Monthly</option>
                        <option value="yearly">Yearly</option>
                        <option value="custom">Custom</option>
                    </select>
                    {timeframe === 'custom' && (
                        <div className="flex gap-2">
                            <input
                                type="date"
                                value={dateRange.start}
                                onChange={(e) => setDateRange({ ...dateRange, start: e.target.value })}
                                className="bg-[#333] rounded-lg px-4 py-2"
                            />
                            <input
                                type="date"
                                value={dateRange.end}
                                onChange={(e) => setDateRange({ ...dateRange, end: e.target.value })}
                                className="bg-[#333] rounded-lg px-4 py-2"
                            />
                        </div>
                    )}
                </div>
            </div>

            <div className="bg-[#242424] p-6 rounded-xl">
                <LineChart width={800} height={300} data={filteredSales}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis
                        dataKey="date"
                        tickFormatter={(date) => format(new Date(date), 'MMM dd')}
                    />
                    <YAxis />
                    <Tooltip
                        labelFormatter={(date) => format(new Date(date), 'MMM dd, yyyy')}
                        formatter={(value) => [`$${value.toLocaleString()}`, 'Amount']}
                    />
                    <Legend />
                    <Line type="monotone" dataKey="amount" stroke="#9ee637" />
                </LineChart>
            </div>

            <div className="bg-[#242424] p-6 rounded-xl">
                <div className="overflow-x-auto">
                    <table className="w-full">
                        <thead>
                        <tr className="border-b border-[#333]">
                            <th className="p-3 text-left">Date</th>
                            <th className="p-3 text-left">Product</th>
                            <th className="p-3 text-left">Quantity</th>
                            <th className="p-3 text-left">Amount</th>
                        </tr>
                        </thead>
                        <tbody>
                        {filteredSales.map((sale) => (
                            <tr key={sale._id} className="border-b border-[#333]">
                                <td className="p-3">{format(new Date(sale.date), 'MMM dd, yyyy')}</td>
                                <td className="p-3">{sale.product}</td>
                                <td className="p-3">{sale.quantity}</td>
                                <td className="p-3">${sale.amount.toLocaleString()}</td>
                            </tr>
                        ))}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    );
};

export default Dashboard;